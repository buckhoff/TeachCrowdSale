@model List<TeachCrowdSale.Core.Models.StakingPoolDisplayModel>

<div class="pools-grid">
    @if (Model?.Any() == true)
    {
        @foreach (var pool in Model)
        {
            <div class="pool-card" data-pool-id="@pool.Id">
                <div class="pool-header">
                    <h3 class="pool-name">@pool.Name</h3>
                    <div class="pool-status @(pool.IsActive ? "active" : "inactive")">
                        <span class="status-dot"></span>
                        <span class="status-text">@(pool.IsActive ? "Active" : "Inactive")</span>
                    </div>
                </div>

                <div class="pool-apy">
                    <span class="apy-label">Total APY</span>
                    <span class="apy-value">@pool.TotalAPY.ToString("F1")%</span>
                    @if (pool.BonusAPY > 0)
                    {
                        <div class="apy-breakdown">
                            <span class="apy-base">Base: @pool.BaseAPY.ToString("F1")%</span>
                            <span class="apy-bonus">Bonus: @pool.BonusAPY.ToString("F1")%</span>
                        </div>
                    }
                </div>

                <div class="pool-details">
                    <div class="pool-detail">
                        <span class="detail-label">Lock Period</span>
                        <span class="detail-value">@pool.LockPeriodDays days</span>
                    </div>
                    <div class="pool-detail">
                        <span class="detail-label">Min Stake</span>
                        <span class="detail-value">@pool.MinStakeAmount.ToString("N0") TEACH</span>
                    </div>
                    <div class="pool-detail">
                        <span class="detail-label">Max Stake</span>
                        <span class="detail-value">@(pool.MaxStakeAmount > 0 ? pool.MaxStakeAmount.ToString("N0") + " TEACH" : "No Limit")</span>
                    </div>
                </div>

                <div class="pool-capacity">
                    <div class="capacity-header">
                        <span class="capacity-label">Pool Capacity</span>
                        <span class="capacity-percentage">@pool.PoolUtilization.ToString("F1")%</span>
                    </div>
                    <div class="capacity-bar">
                        <div class="capacity-fill" style="width: @pool.PoolUtilization.ToString("F1")%"></div>
                    </div>
                    <div class="capacity-amounts">
                        <span>@pool.TotalStaked.ToString("N0") TEACH</span>
                        <span>@pool.MaxPoolSize.ToString("N0") TEACH</span>
                    </div>
                </div>

                @if (pool.IsActive)
                {
                    <button class="btn btn-primary pool-stake-btn" onclick="StakingDashboard.openStakeDialog(@pool.Id)">
                        <span class="btn-text">Stake Now</span>
                        <span class="btn-icon">⚡</span>
                    </button>
                }
                else
                {
                    <button class="btn btn-secondary pool-stake-btn" disabled>
                        <span class="btn-text">Pool Inactive</span>
                        <span class="btn-icon">⏸️</span>
                    </button>
                }

                @if (!string.IsNullOrEmpty(pool.Description))
                {
                    <div class="pool-description">
                        <p>@pool.Description</p>
                    </div>
                }

                @if (pool.IsRecommended)
                {
                    <div class="pool-badge">
                        <span class="badge-icon">⭐</span>
                        <span class="badge-text">Recommended</span>
                    </div>
                }

                <div class="pool-footer">
                    <div class="pool-actions">
                        <button class="btn btn-outline btn-sm" onclick="StakingDashboard.viewPoolDetails(@pool.Id)">
                            <span class="btn-icon">📊</span>
                            <span class="btn-text">Details</span>
                        </button>
                    </div>
                    <div class="pool-meta">
                        <span class="meta-item">Category: @pool.PoolCategory</span>
                        @if (pool.EarlyWithdrawalPenalty > 0)
                        {
                            <span class="meta-item">Penalty: @pool.EarlyWithdrawalPenalty.ToString("F1")%</span>
                        }
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="pools-empty">
            <div class="empty-state">
                <div class="empty-icon">⚡</div>
                <h4 class="empty-title">No Staking Pools Available</h4>
                <p class="empty-description">
                    Staking pools are being prepared. Check back soon for opportunities to stake your TEACH tokens and support education.
                </p>
                <button class="btn btn-secondary" onclick="StakingDashboard.refreshPools()">
                    <span class="btn-icon">🔄</span>
                    <span class="btn-text">Refresh Pools</span>
                </button>
            </div>
        </div>
    }
</div>

@if (Model?.Any() == true)
{
    <div class="pools-summary">
        <div class="summary-stats">
            <div class="summary-stat">
                <span class="stat-label">Total Pools</span>
                <span class="stat-value">@Model.Count()</span>
            </div>
            <div class="summary-stat">
                <span class="stat-label">Active Pools</span>
                <span class="stat-value">@Model.Count(p => p.IsActive)</span>
            </div>
            <div class="summary-stat">
                <span class="stat-label">Avg APY</span>
                <span class="stat-value">@(Model.Where(p => p.IsActive).Any() ? Model.Where(p => p.IsActive).Average(p => p.TotalAPY).ToString("F1") : "0")%</span>
            </div>
            <div class="summary-stat">
                <span class="stat-label">Total Staked</span>
                <span class="stat-value">@Model.Sum(p => p.TotalStaked).ToString("N0") TEACH</span>
            </div>
        </div>
    </div>
}