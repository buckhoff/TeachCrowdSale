@using TeachCrowdSale.Core.Data.Enum
@model TeachCrowdSale.Core.Models.MilestoneModel

<!-- Views/Roadmap/_MilestoneCard.cshtml -->
<!-- Individual milestone card component for grid display -->

<div class="milestone-card @Model.StatusClass @Model.PriorityClass"
     data-milestone-id="@Model.Id"
     data-status="@Model.Status"
     data-category="@Model.Category"
     data-priority="@Model.Priority">

    <!-- Card Header with Status and Category -->
    <div class="milestone-header">
        <div class="milestone-category @GetCategoryClass(Model.Category)">
            <span class="category-icon">@GetCategoryIcon(Model.Category)</span>
            <span class="category-text">@Model.Category</span>
        </div>

        <div class="milestone-status @Model.StatusClass">
            <span class="status-icon">@GetStatusIcon(Model.Status)</span>
            <span class="status-text">@Model.Status</span>
        </div>

        @if (Model.IsOverdue || Model.IsBlocked)
        {
            <div class="milestone-alerts">
                @if (Model.IsOverdue)
                {
                    <span class="alert-badge overdue" title="Milestone is overdue">
                        <span class="alert-icon">⚠️</span>
                        <span class="alert-text">Overdue</span>
                    </span>
                }
                @if (Model.IsBlocked)
                {
                    <span class="alert-badge blocked" title="Milestone is blocked">
                        <span class="alert-icon">🚫</span>
                        <span class="alert-text">Blocked</span>
                    </span>
                }
            </div>
        }
    </div>

    <!-- Card Content -->
    <div class="milestone-content">
        <h4 class="milestone-title" title="@Model.Title">@Model.Title</h4>
        <p class="milestone-description" title="@Model.Description">
            @TruncateText(Model.Description, 120)
        </p>

        <!-- Priority Indicator -->
        <div class="milestone-priority @Model.PriorityClass">
            <span class="priority-dot"></span>
            <span class="priority-text">@Model.Priority Priority</span>
        </div>

        <!-- Progress Section -->
        <div class="milestone-progress">
            <div class="progress-header">
                <span class="progress-label">Progress</span>
                <span class="progress-percentage">@Model.ProgressPercentage.ToString("F1")%</span>
            </div>
            <div class="progress-bar-container">
                <div class="progress-bar">
                    <div class="progress-fill @GetProgressClass(Model.ProgressPercentage, Model.Status.ToString())"
                         style="width: @Model.ProgressPercentage%">
                        <div class="progress-shimmer"></div>
                    </div>
                </div>
                @if (Model.Status.Equals(MilestoneStatus.InProgress))
                {
                    <div class="progress-pulse"></div>
                }
            </div>
        </div>

        <!-- Timeline Information -->
        <div class="milestone-timeline">
            @if (Model.StartDate.HasValue)
            {
                <div class="timeline-item start">
                    <span class="timeline-icon">🚀</span>
                    <div class="timeline-details">
                        <span class="timeline-label">Started</span>
                        <span class="timeline-date">@Model.StartDate.Value.ToString("MMM dd, yyyy")</span>
                    </div>
                </div>
            }

            @if (Model.EstimatedCompletionDate.HasValue)
            {
                <div class="timeline-item @(Model.IsOverdue ? "overdue" : "target")">
                    <span class="timeline-icon">@(Model.IsOverdue ? "⚠️" : "🎯")</span>
                    <div class="timeline-details">
                        <span class="timeline-label">@(Model.ActualCompletionDate.HasValue ? "Completed" : Model.IsOverdue ? "Was Due" : "Target")</span>
                        <span class="timeline-date">
                            @((Model.ActualCompletionDate ?? Model.EstimatedCompletionDate).Value.ToString("MMM dd, yyyy"))
                        </span>
                    </div>
                </div>
            }
        </div>

        <!-- Tasks Summary -->
        <div class="milestone-tasks">
            <div class="tasks-summary">
                <div class="tasks-progress">
                    <span class="tasks-completed">@Model.CompletedTasksCount</span>
                    <span class="tasks-separator">/</span>
                    <span class="tasks-total">@Model.TotalTasksCount</span>
                    <span class="tasks-label">tasks completed</span>
                </div>

                @if (Model.TotalTasksCount > 0)
                {
                    <div class="tasks-bar">
                        <div class="tasks-fill" style="width: @((decimal)Model.CompletedTasksCount / Model.TotalTasksCount * 100)%"></div>
                    </div>
                }
            </div>

            @if (Model.Tasks.Any())
            {
                <div class="tasks-breakdown">
                    @{
                        var tasksByStatus = Model.Tasks.GroupBy(t => t.Status).ToList();
                    }
                    @foreach (var statusGroup in tasksByStatus.Take(3))
                    {
                        <div class="task-status-group">
                            <span class="task-status-count">@statusGroup.Count()</span>
                            <span class="task-status-name">@statusGroup.Key</span>
                        </div>
                    }
                </div>
            }
        </div>

        <!-- Duration and Estimates -->
        <div class="milestone-estimates">
            @if (!string.IsNullOrEmpty(Model.DurationEstimate))
            {
                <div class="estimate-item">
                    <span class="estimate-icon">⏱️</span>
                    <span class="estimate-text">@Model.DurationEstimate duration</span>
                </div>
            }

            @if (!string.IsNullOrEmpty(Model.TimeRemaining) && Model.Status. != "Completed")
            {
                <div class="estimate-item @(Model.IsOverdue ? "overdue" : "")">
                    <span class="estimate-icon">@(Model.IsOverdue ? "⚠️" : "⏳")</span>
                    <span class="estimate-text">@Model.TimeRemaining @(Model.IsOverdue ? "overdue" : "remaining")</span>
                </div>
            }
        </div>

        <!-- Recent Activity Indicator -->
        @if (Model.RecentUpdates.Any(u => u.CreatedAt >= DateTime.UtcNow.AddDays(-7)))
        {
            <div class="recent-activity">
                <div class="activity-indicator">
                    <span class="activity-pulse"></span>
                    <span class="activity-text">Recent activity</span>
                </div>
                <div class="activity-details">
                    @{
                        var recentUpdate = Model.RecentUpdates.OrderByDescending(u => u.CreatedAt).First();
                    }
                    <span class="activity-update">@TruncateText(recentUpdate.Title, 50)</span>
                    <span class="activity-time">@GetTimeAgo(recentUpdate.CreatedAt)</span>
                </div>
            </div>
        }
    </div>

    <!-- Card Footer with Actions -->
    <div class="milestone-footer">
        <div class="milestone-actions">
            <button class="action-btn primary details-btn"
                    data-milestone-id="@Model.Id"
                    title="View detailed information">
                <span class="action-icon">👁️</span>
                <span class="action-text">Details</span>
            </button>

            @if (!string.IsNullOrEmpty(Model.GitHubIssueUrl))
            {
                <a href="@Model.GitHubIssueUrl"
                   target="_blank"
                   class="action-btn secondary github-btn"
                   title="View on GitHub">
                    <span class="action-icon">🔗</span>
                    <span class="action-text">GitHub</span>
                </a>
            }

            @if (!string.IsNullOrEmpty(Model.DocumentationUrl))
            {
                <a href="@Model.DocumentationUrl"
                   target="_blank"
                   class="action-btn secondary docs-btn"
                   title="View documentation">
                    <span class="action-icon">📚</span>
                    <span class="action-text">Docs</span>
                </a>
            }
        </div>

        <!-- Dependencies Indicator -->
        @if (Model.Dependencies.Any())
        {
            <div class="dependencies-indicator">
                <span class="dependencies-icon">🔗</span>
                <span class="dependencies-count">@Model.Dependencies.Count dependencies</span>
                @if (Model.Dependencies.Any(d => d.IsBlocking))
                {
                    <span class="blocking-indicator" title="Has blocking dependencies">🚫</span>
                }
            </div>
        }

        <!-- Card Menu -->
        <div class="card-menu">
            <button class="menu-trigger" data-milestone-id="@Model.Id" title="More options">
                <span class="menu-icon">⋯</span>
            </button>
            <div class="menu-dropdown" style="display: none;">
                <div class="menu-item" data-action="track">
                    <span class="menu-icon">📌</span>
                    <span class="menu-text">Track Progress</span>
                </div>
                <div class="menu-item" data-action="export">
                    <span class="menu-icon">📤</span>
                    <span class="menu-text">Export Data</span>
                </div>
                <div class="menu-item" data-action="share">
                    <span class="menu-icon">🔗</span>
                    <span class="menu-text">Share Link</span>
                </div>
                @if (Model.Dependencies.Any())
                {
                    <div class="menu-item" data-action="dependencies">
                        <span class="menu-icon">🕸️</span>
                        <span class="menu-text">View Dependencies</span>
                    </div>
                }
                <div class="menu-divider"></div>
                <div class="menu-item" data-action="history">
                    <span class="menu-icon">📜</span>
                    <span class="menu-text">View History</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Hover Effects and Overlays -->
    <div class="card-hover-overlay">
        <div class="hover-content">
            <div class="quick-stats">
                <div class="quick-stat">
                    <span class="stat-value">@Model.ProgressPercentage.ToString("F0")%</span>
                    <span class="stat-label">Complete</span>
                </div>
                <div class="quick-stat">
                    <span class="stat-value">@Model.CompletedTasksCount/@Model.TotalTasksCount</span>
                    <span class="stat-label">Tasks</span>
                </div>
            </div>
            <div class="quick-actions">
                <button class="quick-action" data-action="view" title="Quick view">👁️</button>
                <button class="quick-action" data-action="track" title="Track">📌</button>
                <button class="quick-action" data-action="share" title="Share">🔗</button>
            </div>
        </div>
    </div>

    <!-- Selection Checkbox (for bulk operations) -->
    <div class="card-selection">
        <input type="checkbox" class="milestone-checkbox"
               data-milestone-id="@Model.Id"
               id="milestone-@Model.Id">
        <label for="milestone-@Model.Id" class="selection-label"></label>
    </div>
</div>

@functions {
    string GetStatusIcon(string status)
    {
        return status.ToLower() switch
        {
            "completed" => "✅",
            "in progress" => "🔄",
            "testing" => "🧪",
            "planning" => "📋",
            "on hold" => "⏸️",
            "blocked" => "🚫",
            _ => "📌"
        };
    }

    string GetCategoryIcon(string category)
    {
        return category.ToLower() switch
        {
            "blockchain" => "⛓️",
            "platform" => "🏗️",
            "mobile" => "📱",
            "security" => "🔒",
            "integration" => "🔗",
            "ui/ux" => "🎨",
            "api" => "🔌",
            "testing" => "🧪",
            _ => "⚙️"
        };
    }

    string GetCategoryClass(string category)
    {
        return $"category-{category.ToLower().Replace(" ", "-").Replace("/", "-")}";
    }

    string GetProgressClass(decimal progress, string status)
    {
        if (status.ToLower() == "completed") return "progress-completed";
        if (progress >= 90) return "progress-nearly-complete";
        if (progress >= 75) return "progress-high";
        if (progress >= 50) return "progress-medium";
        if (progress >= 25) return "progress-low";
        return "progress-minimal";
    }

    string TruncateText(string text, int maxLength)
    {
        if (string.IsNullOrWhiteSpace(text) || text.Length <= maxLength)
            return text;

        return text.Substring(0, maxLength - 3) + "...";
    }

    string GetTimeAgo(DateTime date)
    {
        var timespan = DateTime.UtcNow - date;

        if (timespan.TotalDays >= 30) return $"{(int)(timespan.TotalDays / 30)} months ago";
        if (timespan.TotalDays >= 1) return $"{(int)timespan.TotalDays} days ago";
        if (timespan.TotalHours >= 1) return $"{(int)timespan.TotalHours} hours ago";
        if (timespan.TotalMinutes >= 1) return $"{(int)timespan.TotalMinutes} minutes ago";

        return "Just now";
    }
}