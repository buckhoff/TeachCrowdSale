@model TeachCrowdSale.Web.Models.RoadmapPageModel

<!-- Views/Roadmap/_RecentUpdates.cshtml -->
<!-- Recent development updates and activity feed component -->

<section class="recent-updates-section">
    <div class="container">
        <div class="updates-header">
            <div class="header-content">
                <h3>Recent Development Updates</h3>
                <p>Latest progress reports and development activities</p>
            </div>

            <div class="updates-controls">
                <div class="filter-controls">
                    <select class="update-filter" id="update-type-filter">
                        <option value="">All Types</option>
                        <option value="Feature">Features</option>
                        <option value="Bug Fix">Bug Fixes</option>
                        <option value="Security">Security</option>
                        <option value="Performance">Performance</option>
                        <option value="Documentation">Documentation</option>
                    </select>

                    <select class="update-filter" id="update-period-filter">
                        <option value="7">Last 7 days</option>
                        <option value="30" selected>Last 30 days</option>
                        <option value="90">Last 3 months</option>
                        <option value="all">All time</option>
                    </select>
                </div>

                <div class="view-controls">
                    <button class="view-toggle active" data-view="cards">
                        <span class="toggle-icon">⊞</span>
                        <span class="toggle-text">Cards</span>
                    </button>
                    <button class="view-toggle" data-view="timeline">
                        <span class="toggle-icon">📈</span>
                        <span class="toggle-text">Timeline</span>
                    </button>
                    <button class="view-toggle" data-view="feed">
                        <span class="toggle-icon">📰</span>
                        <span class="toggle-text">Feed</span>
                    </button>
                </div>

                <div class="update-actions">
                    <button class="action-btn" id="refresh-updates" title="Refresh updates">
                        <span class="action-icon">🔄</span>
                    </button>
                    <a href="#" class="view-all-updates">View All Updates →</a>
                </div>
            </div>
        </div>

        <!-- Updates Statistics -->
        <div class="updates-stats">
            <div class="stat-item">
                <div class="stat-icon">📝</div>
                <div class="stat-content">
                    <span class="stat-value">@Model.RecentUpdates.Count</span>
                    <span class="stat-label">Recent Updates</span>
                </div>
            </div>

            <div class="stat-item">
                <div class="stat-icon">🔥</div>
                <div class="stat-content">
                    <span class="stat-value">@Model.RecentUpdates.Count(u => u.CreatedAt >= DateTime.UtcNow.AddDays(-7))</span>
                    <span class="stat-label">This Week</span>
                </div>
            </div>

            <div class="stat-item">
                <div class="stat-icon">⚡</div>
                <div class="stat-content">
                    <span class="stat-value">@Model.RecentUpdates.Count(u => u.CreatedAt >= DateTime.UtcNow.AddDays(-1))</span>
                    <span class="stat-label">Today</span>
                </div>
            </div>

            <div class="stat-item">
                <div class="stat-icon">🎯</div>
                <div class="stat-content">
                    <span class="stat-value">@Model.RecentUpdates.Count(u => u.Type == "Feature")</span>
                    <span class="stat-label">Features</span>
                </div>
            </div>
        </div>

        <!-- Updates Cards View -->
        <div class="updates-container" id="updates-cards-view">
            <div class="updates-grid">
                @foreach (var update in Model.RecentUpdates.Take(9))
                {
                    <div class="update-card @update.TypeClass" data-update-id="@update.Id" data-type="@update.Type">
                        <div class="update-header">
                            <div class="update-type @update.TypeClass">
                                <span class="type-icon">@GetUpdateTypeIcon(update.Type)</span>
                                <span class="type-text">@update.Type</span>
                            </div>

                            <div class="update-date">
                                <span class="date-text">@update.FormattedDate</span>
                                <span class="time-ago">@update.TimeAgo</span>
                            </div>
                        </div>

                        <div class="update-content">
                            <h4 class="update-title">@update.Title</h4>
                            <p class="update-description">@TruncateText(update.Content, 150)</p>

                            @if (!string.IsNullOrEmpty(update.MilestoneTitle))
                            {
                                <div class="update-milestone">
                                    <span class="milestone-icon">🎯</span>
                                    <span class="milestone-label">Related to:</span>
                                    <span class="milestone-name">@update.MilestoneTitle</span>
                                </div>
                            }

                            @if (update.ProgressChange.HasValue)
                            {
                                <div class="progress-change @(update.ProgressChange > 0 ? "positive" : update.ProgressChange < 0 ? "negative" : "neutral")">
                                    <span class="change-icon">@(update.ProgressChange > 0 ? "📈" : update.ProgressChange < 0 ? "📉" : "➡️")</span>
                                    <span class="change-text">
                                        @(update.ProgressChange > 0 ? "+" : "")@update.ProgressChange.Value.ToString("F1")% progress
                                    </span>
                                </div>
                            }
                        </div>

                        <div class="update-footer">
                            <div class="update-author">
                                <span class="author-icon">👤</span>
                                <span class="author-name">@update.AuthorName</span>
                            </div>

                            <div class="update-actions">
                                <button class="update-action" data-action="like" title="Like update">
                                    <span class="action-icon">👍</span>
                                </button>
                                <button class="update-action" data-action="share" title="Share update">
                                    <span class="action-icon">🔗</span>
                                </button>
                                <button class="update-action" data-action="details" title="View details">
                                    <span class="action-icon">👁️</span>
                                </button>
                            </div>
                        </div>

                        <!-- Update Impact Indicator -->
                        @if (IsHighImpactUpdate(update))
                        {
                            <div class="impact-badge">
                                <span class="impact-icon">⭐</span>
                                <span class="impact-text">High Impact</span>
                            </div>
                        }
                    </div>
                }
            </div>

            <!-- Load More Updates -->
            <div class="load-more-section">
                <button class="load-more-btn" id="load-more-updates">
                    <span class="load-icon">⬇️</span>
                    <span class="load-text">Load More Updates</span>
                </button>
            </div>
        </div>

        <!-- Updates Timeline View -->
        <div class="updates-container" id="updates-timeline-view" style="display: none;">
            <div class="updates-timeline">
                @foreach (var updateGroup in Model.RecentUpdates.GroupBy(u => u.CreatedAt.Date).OrderByDescending(g => g.Key).Take(7))
                {
                    <div class="timeline-day">
                        <div class="day-header">
                            <div class="day-date">
                                <span class="day-month">@updateGroup.Key.ToString("MMM")</span>
                                <span class="day-number">@updateGroup.Key.Day</span>
                            </div>
                            <div class="day-info">
                                <span class="day-name">@updateGroup.Key.ToString("dddd")</span>
                                <span class="update-count">@updateGroup.Count() updates</span>
                            </div>
                        </div>

                        <div class="day-updates">
                            @foreach (var update in updateGroup.OrderByDescending(u => u.CreatedAt))
                            {
                                <div class="timeline-update @update.TypeClass">
                                    <div class="timeline-marker">
                                        <span class="marker-icon">@GetUpdateTypeIcon(update.Type)</span>
                                    </div>

                                    <div class="timeline-content">
                                        <div class="timeline-header">
                                            <h5 class="timeline-title">@update.Title</h5>
                                            <div class="timeline-meta">
                                                <span class="timeline-type @update.TypeClass">@update.Type</span>
                                                <span class="timeline-time">@update.CreatedAt.ToString("HH:mm")</span>
                                            </div>
                                        </div>

                                        <p class="timeline-description">@update.Content</p>

                                        @if (!string.IsNullOrEmpty(update.MilestoneTitle))
                                        {
                                            <div class="timeline-milestone">
                                                <span class="milestone-link">→ @update.MilestoneTitle</span>
                                            </div>
                                        }

                                        <div class="timeline-footer">
                                            <span class="timeline-author">by @update.AuthorName</span>
                                            @if (update.ProgressChange.HasValue)
                                            {
                                                <span class="timeline-progress @(update.ProgressChange > 0 ? "positive" : "neutral")">
                                                    @(update.ProgressChange > 0 ? "+" : "")@update.ProgressChange.Value.ToString("F1")%
                                                </span>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Updates Feed View -->
        <div class="updates-container" id="updates-feed-view" style="display: none;">
            <div class="updates-feed">
                @foreach (var update in Model.RecentUpdates.Take(15))
                {
                    <div class="feed-item @update.TypeClass">
                        <div class="feed-avatar">
                            <span class="avatar-icon">@GetAuthorIcon(update.AuthorName)</span>
                        </div>

                        <div class="feed-content">
                            <div class="feed-header">
                                <span class="feed-author">@update.AuthorName</span>
                                <span class="feed-action">published a @update.Type.ToLower()</span>
                                <span class="feed-time">@update.TimeAgo</span>
                            </div>

                            <div class="feed-body">
                                <h4 class="feed-title">@update.Title</h4>
                                <p class="feed-description">@update.Content</p>

                                @if (!string.IsNullOrEmpty(update.MilestoneTitle))
                                {
                                    <div class="feed-context">
                                        <span class="context-icon">🔗</span>
                                        <span class="context-text">Part of <strong>@update.MilestoneTitle</strong></span>
                                    </div>
                                }
                            </div>

                            <div class="feed-footer">
                                <div class="feed-tags">
                                    <span class="feed-tag @update.TypeClass">@update.Type</span>
                                    @if (update.ProgressChange.HasValue)
                                    {
                                        <span class="feed-tag progress">@(update.ProgressChange > 0 ? "+" : "")@update.ProgressChange.Value.ToString("F1")% progress</span>
                                    }
                                </div>

                                <div class="feed-actions">
                                    <button class="feed-action-btn" data-action="react">
                                        <span class="action-icon">👍</span>
                                        <span class="action-count">0</span>
                                    </button>
                                    <button class="feed-action-btn" data-action="comment">
                                        <span class="action-icon">💬</span>
                                        <span class="action-count">0</span>
                                    </button>
                                    <button class="feed-action-btn" data-action="share">
                                        <span class="action-icon">🔗</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Empty State -->
        <div class="updates-empty" id="updates-empty" style="display: none;">
            <div class="empty-content">
                <div class="empty-icon">📝</div>
                <h3 class="empty-title">No Updates Found</h3>
                <p class="empty-description">
                    No development updates match your current filters. Try adjusting the time period or update type.
                </p>
                <div class="empty-actions">
                    <button class="btn-secondary" id="reset-update-filters">Reset Filters</button>
                    <button class="btn-primary" id="view-all-updates-btn">View All Updates</button>
                </div>
            </div>
        </div>

        <!-- Loading State -->
        <div class="updates-loading" id="updates-loading" style="display: none;">
            <div class="loading-content">
                <div class="loading-spinner"></div>
                <h3 class="loading-title">Loading Updates</h3>
                <p class="loading-description">Fetching the latest development activity...</p>
            </div>
        </div>

        <!-- Update Categories Summary -->
        <div class="update-categories">
            <div class="categories-header">
                <h4>Update Categories</h4>
                <span class="categories-period">Last 30 days</span>
            </div>

            <div class="categories-grid">
                @{
                    var categoryGroups = Model.RecentUpdates
                    .Where(u => u.CreatedAt >= DateTime.UtcNow.AddDays(-30))
                    .GroupBy(u => u.Type)
                    .OrderByDescending(g => g.Count());
                }

                @foreach (var category in categoryGroups)
                {
                    <div class="category-card @GetTypeClass(category.Key)">
                        <div class="category-icon">@GetUpdateTypeIcon(category.Key)</div>
                        <div class="category-content">
                            <div class="category-name">@category.Key</div>
                            <div class="category-count">@category.Count() updates</div>
                            <div class="category-percentage">
                                @((decimal)category.Count() / Model.RecentUpdates.Count(u => u.CreatedAt >= DateTime.UtcNow.AddDays(-30)) * 100).ToString("F0")%
                            </div>
                        </div>
                        <div class="category-trend">
                            @{
                                var previousWeekCount = Model.RecentUpdates
                                .Where(u => u.Type == category.Key && u.CreatedAt >= DateTime.UtcNow.AddDays(-14) && u.CreatedAt < DateTime.UtcNow.AddDays(-7))
                                .Count();
                                var currentWeekCount = Model.RecentUpdates
                                .Where(u => u.Type == category.Key && u.CreatedAt >= DateTime.UtcNow.AddDays(-7))
                                .Count();
                                var trend = currentWeekCount > previousWeekCount ? "up" : currentWeekCount < previousWeekCount ? "down" : "stable";
                            }
                            <span class="trend-indicator @trend">
                                @(trend == "up" ? "↗️" : trend == "down" ? "↘️" : "➡️")
                            </span>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Developer Activity Summary -->
        <div class="developer-activity">
            <div class="activity-header">
                <h4>Developer Activity</h4>
                <span class="activity-period">Most active contributors</span>
            </div>

            <div class="developer-list">
                @{
                    var topContributors = Model.RecentUpdates
                    .Where(u => u.CreatedAt >= DateTime.UtcNow.AddDays(-30))
                    .GroupBy(u => u.AuthorName)
                    .OrderByDescending(g => g.Count())
                    .Take(5);
                }

                @foreach (var contributor in topContributors)
                {
                    <div class="developer-item">
                        <div class="developer-avatar">
                            <span class="avatar-text">@GetAuthorIcon(contributor.Key)</span>
                        </div>
                        <div class="developer-info">
                            <span class="developer-name">@contributor.Key</span>
                            <span class="developer-stats">@contributor.Count() updates this month</span>
                        </div>
                        <div class="developer-activity">
                            @{
                                var recentActivity = contributor.OrderByDescending(u => u.CreatedAt).First();
                            }
                            <span class="activity-last">@GetTimeAgo(recentActivity.CreatedAt)</span>
                            <span class="activity-type @GetTypeClass(recentActivity.Type)">@recentActivity.Type</span>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Subscribe to Updates -->
        <div class="updates-subscription">
            <div class="subscription-content">
                <div class="subscription-header">
                    <h4>Stay Updated</h4>
                    <p>Get notified about important development milestones and releases</p>
                </div>

                <div class="subscription-options">
                    <div class="subscription-method">
                        <span class="method-icon">📧</span>
                        <div class="method-content">
                            <span class="method-title">Email Notifications</span>
                            <span class="method-description">Weekly development summaries</span>
                        </div>
                        <button class="method-action">Subscribe</button>
                    </div>

                    <div class="subscription-method">
                        <span class="method-icon">📱</span>
                        <div class="method-content">
                            <span class="method-title">Push Notifications</span>
                            <span class="method-description">Real-time milestone updates</span>
                        </div>
                        <button class="method-action">Enable</button>
                    </div>

                    <div class="subscription-method">
                        <span class="method-icon">📢</span>
                        <div class="method-content">
                            <span class="method-title">Discord Announcements</span>
                            <span class="method-description">Join our development channel</span>
                        </div>
                        <button class="method-action">Join</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Update Analytics -->
        <div class="update-analytics">
            <div class="analytics-header">
                <h4>Update Analytics</h4>
                <div class="analytics-controls">
                    <select class="analytics-period" id="analytics-period">
                        <option value="7">Last 7 days</option>
                        <option value="30" selected>Last 30 days</option>
                        <option value="90">Last 3 months</option>
                    </select>
                </div>
            </div>

            <div class="analytics-grid">
                <div class="analytics-card">
                    <div class="analytics-metric">
                        <div class="metric-icon">📊</div>
                        <div class="metric-content">
                            <div class="metric-value">
                                @(Model.RecentUpdates.Count(u => u.CreatedAt >= DateTime.UtcNow.AddDays(-30)) / 30.0).ToString("F1")
                            </div>
                            <div class="metric-label">Updates per day</div>
                            <div class="metric-trend positive">
                                <span class="trend-icon">↗️</span>
                                <span class="trend-text">+15% from last month</span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="analytics-card">
                    <div class="analytics-metric">
                        <div class="metric-icon">⚡</div>
                        <div class="metric-content">
                            <div class="metric-value">
                                @(Model.RecentUpdates.Where(u => u.ProgressChange.HasValue).Average(u => u.ProgressChange ?? 0).ToString("F1"))%
                            </div>
                            <div class="metric-label">Avg progress per update</div>
                            <div class="metric-trend positive">
                                <span class="trend-icon">📈</span>
                                <span class="trend-text">Steady progress</span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="analytics-card">
                    <div class="analytics-metric">
                        <div class="metric-icon">🎯</div>
                        <div class="metric-content">
                            <div class="metric-value">
                                @Model.RecentUpdates.Count(u => IsHighImpactUpdate(u))
                            </div>
                            <div class="metric-label">High impact updates</div>
                            <div class="metric-trend neutral">
                                <span class="trend-icon">⭐</span>
                                <span class="trend-text">Quality focus</span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="analytics-card">
                    <div class="analytics-metric">
                        <div class="metric-icon">👥</div>
                        <div class="metric-content">
                            <div class="metric-value">
                                @Model.RecentUpdates.Select(u => u.AuthorName).Distinct().Count()
                            </div>
                            <div class="metric-label">Active contributors</div>
                            <div class="metric-trend positive">
                                <span class="trend-icon">👨‍💻</span>
                                <span class="trend-text">Growing team</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@functions {
    string GetUpdateTypeIcon(string type)
    {
        return type.ToLower() switch
        {
            "feature" => "🎉",
            "bug fix" => "🐛",
            "security" => "🔒",
            "performance" => "⚡",
            "documentation" => "📚",
            "testing" => "🧪",
            "refactor" => "🔧",
            "ui/ux" => "🎨",
            "deployment" => "🚀",
            _ => "📝"
        };
    }

    string GetTypeClass(string type)
    {
        return $"type-{type.ToLower().Replace(" ", "-").Replace("/", "-")}";
    }

    string GetAuthorIcon(string authorName)
    {
        if (string.IsNullOrEmpty(authorName)) return "👤";
        return authorName.First().ToString().ToUpper();
    }

    string TruncateText(string text, int maxLength)
    {
        if (string.IsNullOrWhiteSpace(text) || text.Length <= maxLength)
            return text;

        return text.Substring(0, maxLength - 3) + "...";
    }

    string GetTimeAgo(DateTime date)
    {
        var timespan = DateTime.UtcNow - date;

        if (timespan.TotalDays >= 30) return $"{(int)(timespan.TotalDays / 30)} months ago";
        if (timespan.TotalDays >= 1) return $"{(int)timespan.TotalDays} days ago";
        if (timespan.TotalHours >= 1) return $"{(int)timespan.TotalHours} hours ago";
        if (timespan.TotalMinutes >= 1) return $"{(int)timespan.TotalMinutes} minutes ago";

        return "Just now";
    }

    bool IsHighImpactUpdate(TeachCrowdSale.Core.Models.UpdateDisplayModel update)
    {
        return update.Type == "Security" ||
               update.Type == "Feature" && update.ProgressChange.HasValue && update.ProgressChange > 20 ||
               update.Title.Contains("release", StringComparison.OrdinalIgnoreCase) ||
               update.Title.Contains("launch", StringComparison.OrdinalIgnoreCase);
    }
}